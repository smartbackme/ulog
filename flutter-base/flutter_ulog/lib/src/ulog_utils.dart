
class ULogUtils{

  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex =
  RegExp(r'#[0-9]+[\s]+(.+) \(([^\s]+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex =
  RegExp(r'^((packages|dart-sdk)\/[^\s]+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex =
  RegExp(r'^(?:package:)?(dart:[^\s]+|[^\s]+)');

  static final ignorePackage = "flutter_ulog";

  static List<String> cropStackTrace(StackTrace stackTrace,int maxDepth){
    var stack = getRealStackTrack(stackTrace);

    var realDepth = stack.length;
    if (maxDepth > 0) {
      realDepth = realDepth<maxDepth?realDepth:maxDepth;
    }
    return stack.sublist(0,realDepth);
  }

  ///如果获得真正的堆栈跟踪，则会删除来自ULog库的所有元素。
  static List<String> getRealStackTrack(StackTrace stackTrace){
    var count = 0;
    var formatted = <String>[];
    var stack = stackTrace.toString();
    for (var line in stack.split('\n')) {
      if (_discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line) ||
          line.isEmpty) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
      count++;
    }
    return formatted;
  }

  static bool _discardDeviceStacktraceLine(String line) {
    var match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(2)!.startsWith('package:$ignorePackage');
  }
  static bool _discardWebStacktraceLine(String line) {
    var match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('packages/$ignorePackage')
        || match.group(1)!.startsWith('dart-sdk/lib');
  }

  static bool _discardBrowserStacktraceLine(String line) {
    var match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('package:$ignorePackage')
        || match.group(1)!.startsWith('dart:');
  }
}